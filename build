#!/bin/bash

usage()
{
	echo ""
	echo "Usage: `basename $0` [options] [-jn] [-v] [-h]"
	echo "Options:"
	echo "  release, debug: "
	echo "      Specifies the build type."
	echo "  i386, amd64, arm, arm64, mips, mips64, ppc, ppc64:"
	echo "      Specifies the architecture for code generation."
	echo "  clean: "
	echo "      Clean the build folder."
	echo "  -h, --help:"
	echo "      Print this message and exit."
	echo ""
	exit 0
}

HOST_OS=`uname`
HOST_ARCH=`uname -m`

case ${HOST_ARCH} in
	i386|i686) HOST_ARCH="i386"
		;;
	x86_64|amd64) HOST_ARCH="amd64"
		;;
	armv6|armv7|armv7s|armv7l) HOST_ARCH="arm"
		;;
	aarch64) HOST_ARCH="arm64"
		;;
	mips|mipsel) HOST_ARCH="mips"
		;;
	mips64) HOST_ARCH="mips64"
		;;
	powerpc) HOST_ARCH="ppc"
		;;
	ppc64) HOST_ARCH="ppc64"
		;;
esac

TARGET_OS=$HOST_OS
TARGET_ARCH=$HOST_ARCH
BUILD_TYPE="release"
BUILD_OPTION=""
GCC_VERSION=`gcc -dumpversion`

for i in "$@"
do
	case $i in
		i386|amd64|arm|arm64|mips|mips64|ppc|ppc64) TARGET_ARCH=$i
			;;
		release|debug|clean) BUILD_TYPE=$i
			;;
		ci) CI="ci"
			;;
		-j*) 
			if [ "$BUILD_JOBS" = "" ]; then
				BUILD_JOBS="${i#-j}"
			fi
			;;
		-v) BUILD_VERBOSE='VERBOSE=1' 
			;;
  		--help|-h) usage
			;;
		*) echo "illegal option $i"
			usage
			;;
	esac
done

if [ $TARGET_ARCH != $HOST_ARCH ] || [ $TARGET_OS != $HOST_OS ]; then
	case $TARGET_ARCH in
		i386)
			if [ $HOST_ARCH = "amd64" ]; then
				BUILD_OPTION="-m32"
			else
				usage
			fi
			;;
		amd64)
			if [ $TARGET_OS != "Linux" ]; then
				usage
			fi
			;;
		arm)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_OPTION="-march=armv7-a -mfpu=vfp3 -marm --target=arm-linux-gnueabihf -L/usr/lib/gcc-cross/arm-linux-gnueabihf/${GCC_VERSION} -L/usr/arm-linux-gnueabihf/lib -I/usr/arm-linux-gnueabihf/include -I/usr/arm-linux-gnueabihf/include/c++/${GCC_VERSION} -I/usr/arm-linux-gnueabihf/include/c++/${GCC_VERSION}/arm-linux-gnueabihf"
			else
				usage
			fi
			;;
		arm64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_OPTION="--target=aarch64-linux-gnu -L/usr/lib/gcc-cross/aarch64-linux-gnu/${GCC_VERSION} -L/usr/aarch64-linux-gnu/lib -I/usr/aarch64-linux-gnu/include -I/usr/aarch64-linux-gnu/include/c++/${GCC_VERSION} -I/usr/aarch64-linux-gnu/include/c++/${GCC_VERSION}/aarch64-linux-gnu"
			else
				usage
			fi
			;;
		mips)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_OPTION="--target=mips-linux-gnu  -L/usr/lib/gcc-cross/mips-linux-gnu/${GCC_VERSION} -L/usr/mips-linux-gnu/lib -I/usr/mips-linux-gnu/include -I/usr/mips-linux-gnu/include/c++/${GCC_VERSION} -I/usr/mips-linux-gnu/include/c++/${GCC_VERSION}/mips-linux-gnu"
			else
				usage
			fi
			;;
		mips64)
			if [ $TARGET_OS = "Linux" ]; then
				BUILD_OPTION="--target=mips64-linux-gnuabi64 -L/usr/lib/gcc-cross/mips64-linux-gnuabi64/${GCC_VERSION} -L/usr/mips64-linux-gnuabi64/lib -I/usr/mips64-linux-gnuabi64/include -I/usr/mips64-linux-gnuabi64/include/c++/${GCC_VERSION} -I/usr/mips64-linux-gnuabi64/include/c++/${GCC_VERSION}/mips64-linux-gnuabi64"
			else
				usage
			fi
			;;
		ppc)
			if [ $TARGET_OS = "Linux" ]; then
                BUILD_OPTION="--target=powerpc-linux-gnu -L/usr/lib/gcc-cross/powerpc-linux-gnu/${GCC_VERSION} -L/usr/powerpc-linux-gnu/lib -I/usr/powerpc-linux-gnu/include -I/usr/powerpc-linux-gnu/include/c++/${GCC_VERSION} -I/usr/powerpc-linux-gnu/include/c++/${GCC_VERSION}/powerpc-linux-gnu"
			else
				usage
			fi
			;;
		ppc64)
			if [ $TARGET_OS = "Linux" ]; then
                BUILD_OPTION="--target=powerpc64-linux-gnu -L/usr/lib/gcc-cross/powerpc64-linux-gnu/${GCC_VERSION} -L/usr/powerpc64-linux-gnu/lib -I/usr/powerpc64-linux-gnu/include -I/usr/powerpc64-linux-gnu/include/c++/${GCC_VERSION} -I/usr/powerpc64-linux-gnu/include/c++/${GCC_VERSION}/powerpc64-linux-gnu"
			else
				usage
			fi
			;;
	esac
fi

VENDER_PATH=`pwd`
PARENT_PATH="$(dirname "${VENDER_PATH}")"

USED_BY_FIBJS=""
# when used in fibjs
if [ -e "${PARENT_PATH}/build" ]; then
	USED_BY_FIBJS=1
fi

if [ ! -z "${USED_BY_FIBJS}" ]; then
	OUT_PATH=${VENDER_PATH}/../out
else
	OUT_PATH=${VENDER_PATH}/.dist/out
fi

if [ ${BUILD_TYPE} = 'clean' ]; then
	if [ -e "${OUT_PATH}" ]; then
		rm -rf ${OUT_PATH}/${TARGET_OS}_*
	fi

	exit 0
fi

if [ ! -e "${OUT_PATH}" ]; then
	mkdir -p "${OUT_PATH}"
fi

if [ ! -e "${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}" ]; then
	mkdir -p "${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}"
fi

OUT_PATH="${OUT_PATH}/${TARGET_OS}_${TARGET_ARCH}_${BUILD_TYPE}"
cd ${OUT_PATH}

libs="exlib
cares
gtest
expat
gumbo
gd
tiff
jpeg
png
webp
zlib
leveldb
snappy
ev
pcre
sqlite
mongo
umysql
uuid
exif
winiconv
mbedtls
v8
jssdk
unzip
zmq
editline"

if [ -z $GIT_BRANCH ]; then
	GIT_BRANCH=$(git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/')
fi

if [ "$GIT_BRANCH" = "test_ci" ]; then
	echo "this is ci test branch :)"
	libs="uuid"
fi

for lib in ${libs}
do

	if [ ! -e ${lib} ]; then
		mkdir ${lib}
	fi

	cd ${lib}
	cmake -Wno-dev -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DARCH=${TARGET_ARCH}  -DBUILD_TYPE=${BUILD_TYPE} -DBUILD_OPTION="${BUILD_OPTION}" -Dctx_used_by_fibjs="${USED_BY_FIBJS}" -Dname=${lib} ${VENDER_PATH}/${lib} > CMake.log
	if [ $? != 0 ]; then
		exit 1
	fi

	if [ ! "$BUILD_JOBS" = "" ]; then
		sh -c "${BUILD_VERBOSE} make -j${BUILD_JOBS}"
	else
		sh -c "${BUILD_VERBOSE} make"
	fi
	if [ $? != 0 ]; then
		exit 1
	fi

	cd ..
done

for lib in ${libs}
do

	if [ -e ${VENDER_PATH}/${lib}/test ]; then

		if [ ! -e ${lib}_test ]; then
			mkdir ${lib}_test
		fi

		cd ${lib}_test
		cmake -Wno-dev -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DBUILD_TYPE=${BUILD_TYPE} -DBUILD_OPTION="${BUILD_OPTION}" -Dctx_used_by_fibjs="${USED_BY_FIBJS}" -Dname=${lib} ${VENDER_PATH}/${lib}/test > CMake.log
		if [ $? != 0 ]; then
			exit 1
		fi

		if [ ! "$BUILD_JOBS" = "" ]; then
			sh -c "${BUILD_VERBOSE} make -j${BUILD_JOBS}"
		else
			sh -c "${BUILD_VERBOSE} make"
		fi
		if [ $? != 0 ]; then
			exit 1
		fi

		cd ..

	fi

done

cd ${VENDER_PATH}